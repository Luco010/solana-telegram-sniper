# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).
 
{ config, pkgs, ... }:
 
{
    imports =
    [ # Include the results of the hardware scan.
        ./hardware-configuration.nix
    ];
 
    # Bootloader.
    boot.loader.systemd-boot.enable = true;
    boot.loader.efi.canTouchEfiVariables = true;
    #  boot.loader.grub.enable = true;
    #  boot.loader.grub.device = "/dev/sda";
    #  boot.loader.grub.useOSProber = true;
 
    networking.hostName = "nixos"; # Define your hostname.
    # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.
 
    # Configure network proxy if necessary
    # networking.proxy.default = "http://user:password@proxy:port/";
    # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";
 
    # Enable networking
    networking.networkmanager.enable = true;
 
    # Set your time zone.
    time.timeZone = "America/Washington";
 
    # Select internationalisation properties.
    i18n.defaultLocale = "en_DK.UTF-8";
 
    i18n.extraLocaleSettings = {
        LC_ADDRESS = "en_DK.UTF-8";
        LC_IDENTIFICATION = "en_DK.UTF-8";
        LC_MEASUREMENT = "en_DK.UTF-8";
        LC_MONETARY = "en_DK.UTF-8";
        LC_NAME = "en_DK.UTF-8";
        LC_NUMERIC = "en_DK.UTF-8";
        LC_PAPER = "en_DK.UTF-8";
        LC_TELEPHONE = "en_DK.UTF-8";
        LC_TIME = "en_DK.UTF-8";
    };
 
    # Enable the X11 windowing system.
    #services.xserver.enable = true;
 
    # Enable the XFCE Desktop Environment.
    #services.xserver.displayManager.lightdm.enable = true;
    #services.xserver.desktopManager.xfce.enable = true;
 
    # Configure keymap in X11
    #services.xserver = {
    #  layout = "us";
    #  xkbVariant = "";
    #};
 
    # Configure console keymap
    console.keyMap = "us";
 
    # Enable CUPS to print documents.
    #services.printing.enable = true;
 
    #services.avahi = {
    #  enable = true;
    #  nssmdns = true;
    #  openFirewall = true;
    #};
 
    # Enable sound with pipewire.
    sound.enable = true;
    hardware.pulseaudio.enable = false;
    security.rtkit.enable = true;
    services.pipewire = {
        enable = true;
        alsa.enable = true;
        alsa.support32Bit = true;
        pulse.enable = true;
        # If you want to use JACK applications, uncomment this
        #jack.enable = true;
 
        # use the example session manager (no others are packaged yet so this is enabled by default,
        # no need to redefine it in your config for now)
        #media-session.enable = true;
    };
 
    # Enable touchpad support (enabled default in most desktopManager).
    # services.xserver.libinput.enable = true;
 
    # Define a user account. Don't forget to set a password with ‘passwd’.
    users.users.poq = {
        isNormalUser = true;
        description = "wolf";
        extraGroups = [ "networkmanager" "wheel" ];
        packages = with pkgs; [
            #  firefox
            #  thunderbird
        ];
    };
 
    # Enable automatic login for the user.
    #services.xserver.displayManager.autoLogin.enable = true;
    #services.xserver.displayManager.autoLogin.user = "poq";
 
    # Allow unfree packages
    nixpkgs.config.allowUnfree = true;
 
    # List packages installed in system profile. To search, run:
    # $ nix search wget
    environment.systemPackages = with pkgs; [
        vim
        wget
        waybar
        mako
        libnotify
        rofi-wayland
        hyprland
        xwayland
        swww # wallpaper
        xdg-desktop-portal-gtk
        xdg-desktop-portal-hyprland
        meson
        wayland-protocols
        wayland-utils
        wl-clipboard
        wlroots
        pavucontrol
        pipewire
        firefox
        #brave
        #ungoogled-chromium
        #mpv
        #git
        kitty
        neofetch
        #vscodium
        pciutils # lspci
        #gnome.gdm
        lshw
        inxi
        gamescope
        seatd # needed by gamescope
        #nvidia-vaapi-driver # i dont think i need to add this here...
        #intel-media-driver  # i dont think i need to add this here...
 
    (pkgs.writeShellScriptBin "nvrun" ''
      export __NV_PRIME_RENDER_OFFLOAD=1
      export __NV_PRIME_RENDER_OFFLOAD_PROVIDER=NVIDIA-G0
      export __GLX_VENDOR_LIBRARY_NAME=nvidia
      export __VK_LAYER_NV_optimus=NVIDIA_only
      export LIBVA_DRIVER_NAME=nvidia
      exec -a "$0" "$@"
    '')
 
    ];
 
    # Some programs need SUID wrappers, can be configured further or are
    # started in user sessions.
    # programs.mtr.enable = true;
    # programs.gnupg.agent = {
    #   enable = true;
    #   enableSSHSupport = true;
    # };
 
    # List services that you want to enable:
    services.qemuGuest.enable = true;
    services.spice-vdagentd.enable = true;
    services.gnome.gnome-keyring.enable = true;
    # Enable the OpenSSH daemon.
    #services.openssh.enable = true;
 
    # Open ports in the firewall.
    # networking.firewall.allowedTCPPorts = [ ... ];
    # networking.firewall.allowedUDPPorts = [ ... ];
    # Or disable the firewall altogether.
    # networking.firewall.enable = false;
 
    # This value determines the NixOS release from which the default
    # settings for stateful data, like file locations and database versions
    # on your system were taken. It‘s perfectly fine and recommended to leave
    # this value at the release version of the first install of this system.
    # Before changing this value read the documentation for this option
    # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
    system.stateVersion = "23.11"; # Did you read the comment?
 
 
    # OBS virt Webcam
    #boot.extraModulePackages = with config.boot.kernelPackages; [ v4l2loopback ];
 
 
 
 
    # Automatic Garbage Collection
    #nix.gc = {
    #    automatic = true;
    #    dates = "weekly";
    #    options = "--delete-older-than 7d";
    #};
 
    # for Balena Etcher
    #              nixpkgs.config.permittedInsecurePackages = [
    #                "electron-19.1.9"
    #              ];
 
 
 
    # -----------------------------
    programs.hyprland = {
        enable = true;
        enableNvidiaPatches = true;
        xwayland.enable = true;
    };
 
    # hint electron apps to use wayland
    environment.sessionVariables = {
        NIXOS_OZONE_WL = "1";
    };
 
    # screen sharing
    services.dbus.enable = true;
    xdg.portal = {
        enable = true;
        wlr.enable = true;
        extraPortals = [
            pkgs.xdg-desktop-portal-gtk
        ];
    };
 
    # fix waybar not displaying hyprland workspaces
    nixpkgs.overlays = [
        (self: super: {
            waybar = super.waybar.overrideAttrs (oldAttrs: {
                mesonFlags = oldAttrs.mesonFlags ++ [ "-Dexperimental=true" ];
            });
        })
    ];
 
    fonts.packages = with pkgs; [
        nerdfonts
        #meslo-lgs-nf
    ];
 
    #hardware.opengl = {
    #    enable = true;
    #    driSupport = true;
    #    driSupport32Bit = true;
    #};
 
    #services.xserver.videoDrivers = ["nvidia"];
    services.xserver.videoDrivers = ["nvidia-dkms"];
 
    #hardware.nvidia = {
    #    modesetting.enable = true;
    #    powerManagement.enable = false;
    #    open = true;
    #    nvidiaSettings = true;
    #    package = config.boot.kernelPackages.nvidiaPackages.stable;
    #};
 
  hardware.nvidia = {
    modesetting.enable = true;
    powerManagement = {
      enable = true;
      finegrained = true;
    };
    prime = {
      offload.enable = true;
      intelBusId = "PCI:0:2:0";
      nvidiaBusId = "PCI:2:0:0";
    };
  };
 
 
 
    #hardware.nvidia.prime = {
    #    sync.enable = true;
    #    nvidiaBusId = "PCI:2:0:0";
    #    intelBusId = "PCI:0:2:0";
    #};
 
 
 
  hardware.opengl = {
    extraPackages = with pkgs; [nvidia-vaapi-driver intel-media-driver];
    extraPackages32 = with pkgs.pkgsi686Linux; [nvidia-vaapi-driver intel-media-driver];
  };
 
 
  programs.gamescope = {
    enable = true;
    capSysNice = true;
 
    args = [
      "--rt"
      # nvidia
        # lspci -nnk | grep NVIDIA
      "--prefer-vk-device 10de:134d"
      # intel
        # lspci -nnk | grep VGA
      # "--prefer-vk-device 8086:591b"
    ];
    env = {
      # direct gpu
      LIBVA_DRIVER_NAME = "nvidia";
 
      # offload
      # __NV_PRIME_RENDER_OFFLOAD = "1";
      # __VK_LAYER_NV_optimus = "NVIDIA_only";
 
      __GLX_VENDOR_LIBRARY_NAME = "nvidia";
    };
  };
 
 
 
 
 
}